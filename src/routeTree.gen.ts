/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UserRouteImport } from './routes/_user/route'
import { Route as IndexImport } from './routes/index'
import { Route as UserDashboardImport } from './routes/_user/dashboard'
import { Route as authRouterImport } from './routes/(auth)/router'

// Create Virtual Routes

const SearchLazyImport = createFileRoute('/search')()
const FeedbackLazyImport = createFileRoute('/feedback')()
const UserTrainingLazyImport = createFileRoute('/_user/training')()
const UserProfileLazyImport = createFileRoute('/_user/profile')()
const UserLboLazyImport = createFileRoute('/_user/lbo')()
const UserCreateLazyImport = createFileRoute('/_user/create')()
const authRegisterLazyImport = createFileRoute('/(auth)/register')()
const authRecoverLazyImport = createFileRoute('/(auth)/recover')()
const authLoginLazyImport = createFileRoute('/(auth)/login')()
const UserConsultantIndexLazyImport = createFileRoute('/_user/consultant/')()

// Create/Update Routes

const SearchLazyRoute = SearchLazyImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/search.lazy').then((d) => d.Route))

const FeedbackLazyRoute = FeedbackLazyImport.update({
  id: '/feedback',
  path: '/feedback',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/feedback.lazy').then((d) => d.Route))

const UserRouteRoute = UserRouteImport.update({
  id: '/_user',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UserTrainingLazyRoute = UserTrainingLazyImport.update({
  id: '/training',
  path: '/training',
  getParentRoute: () => UserRouteRoute,
} as any).lazy(() =>
  import('./routes/_user/training.lazy').then((d) => d.Route),
)

const UserProfileLazyRoute = UserProfileLazyImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => UserRouteRoute,
} as any).lazy(() => import('./routes/_user/profile.lazy').then((d) => d.Route))

const UserLboLazyRoute = UserLboLazyImport.update({
  id: '/lbo',
  path: '/lbo',
  getParentRoute: () => UserRouteRoute,
} as any).lazy(() => import('./routes/_user/lbo.lazy').then((d) => d.Route))

const UserCreateLazyRoute = UserCreateLazyImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => UserRouteRoute,
} as any).lazy(() => import('./routes/_user/create.lazy').then((d) => d.Route))

const authRegisterLazyRoute = authRegisterLazyImport
  .update({
    id: '/(auth)/register',
    path: '/register',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/register.lazy').then((d) => d.Route))

const authRecoverLazyRoute = authRecoverLazyImport
  .update({
    id: '/(auth)/recover',
    path: '/recover',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/recover.lazy').then((d) => d.Route))

const authLoginLazyRoute = authLoginLazyImport
  .update({
    id: '/(auth)/login',
    path: '/login',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/login.lazy').then((d) => d.Route))

const UserDashboardRoute = UserDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => UserRouteRoute,
} as any)

const authRouterRoute = authRouterImport.update({
  id: '/(auth)/router',
  path: '/router',
  getParentRoute: () => rootRoute,
} as any)

const UserConsultantIndexLazyRoute = UserConsultantIndexLazyImport.update({
  id: '/consultant/',
  path: '/consultant/',
  getParentRoute: () => UserRouteRoute,
} as any).lazy(() =>
  import('./routes/_user/consultant/index.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_user': {
      id: '/_user'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UserRouteImport
      parentRoute: typeof rootRoute
    }
    '/feedback': {
      id: '/feedback'
      path: '/feedback'
      fullPath: '/feedback'
      preLoaderRoute: typeof FeedbackLazyImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchLazyImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/router': {
      id: '/(auth)/router'
      path: '/router'
      fullPath: '/router'
      preLoaderRoute: typeof authRouterImport
      parentRoute: typeof rootRoute
    }
    '/_user/dashboard': {
      id: '/_user/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof UserDashboardImport
      parentRoute: typeof UserRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/recover': {
      id: '/(auth)/recover'
      path: '/recover'
      fullPath: '/recover'
      preLoaderRoute: typeof authRecoverLazyImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/_user/create': {
      id: '/_user/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof UserCreateLazyImport
      parentRoute: typeof UserRouteImport
    }
    '/_user/lbo': {
      id: '/_user/lbo'
      path: '/lbo'
      fullPath: '/lbo'
      preLoaderRoute: typeof UserLboLazyImport
      parentRoute: typeof UserRouteImport
    }
    '/_user/profile': {
      id: '/_user/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof UserProfileLazyImport
      parentRoute: typeof UserRouteImport
    }
    '/_user/training': {
      id: '/_user/training'
      path: '/training'
      fullPath: '/training'
      preLoaderRoute: typeof UserTrainingLazyImport
      parentRoute: typeof UserRouteImport
    }
    '/_user/consultant/': {
      id: '/_user/consultant/'
      path: '/consultant'
      fullPath: '/consultant'
      preLoaderRoute: typeof UserConsultantIndexLazyImport
      parentRoute: typeof UserRouteImport
    }
  }
}

// Create and export the route tree

interface UserRouteRouteChildren {
  UserDashboardRoute: typeof UserDashboardRoute
  UserCreateLazyRoute: typeof UserCreateLazyRoute
  UserLboLazyRoute: typeof UserLboLazyRoute
  UserProfileLazyRoute: typeof UserProfileLazyRoute
  UserTrainingLazyRoute: typeof UserTrainingLazyRoute
  UserConsultantIndexLazyRoute: typeof UserConsultantIndexLazyRoute
}

const UserRouteRouteChildren: UserRouteRouteChildren = {
  UserDashboardRoute: UserDashboardRoute,
  UserCreateLazyRoute: UserCreateLazyRoute,
  UserLboLazyRoute: UserLboLazyRoute,
  UserProfileLazyRoute: UserProfileLazyRoute,
  UserTrainingLazyRoute: UserTrainingLazyRoute,
  UserConsultantIndexLazyRoute: UserConsultantIndexLazyRoute,
}

const UserRouteRouteWithChildren = UserRouteRoute._addFileChildren(
  UserRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof UserRouteRouteWithChildren
  '/feedback': typeof FeedbackLazyRoute
  '/search': typeof SearchLazyRoute
  '/router': typeof authRouterRoute
  '/dashboard': typeof UserDashboardRoute
  '/login': typeof authLoginLazyRoute
  '/recover': typeof authRecoverLazyRoute
  '/register': typeof authRegisterLazyRoute
  '/create': typeof UserCreateLazyRoute
  '/lbo': typeof UserLboLazyRoute
  '/profile': typeof UserProfileLazyRoute
  '/training': typeof UserTrainingLazyRoute
  '/consultant': typeof UserConsultantIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof UserRouteRouteWithChildren
  '/feedback': typeof FeedbackLazyRoute
  '/search': typeof SearchLazyRoute
  '/router': typeof authRouterRoute
  '/dashboard': typeof UserDashboardRoute
  '/login': typeof authLoginLazyRoute
  '/recover': typeof authRecoverLazyRoute
  '/register': typeof authRegisterLazyRoute
  '/create': typeof UserCreateLazyRoute
  '/lbo': typeof UserLboLazyRoute
  '/profile': typeof UserProfileLazyRoute
  '/training': typeof UserTrainingLazyRoute
  '/consultant': typeof UserConsultantIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_user': typeof UserRouteRouteWithChildren
  '/feedback': typeof FeedbackLazyRoute
  '/search': typeof SearchLazyRoute
  '/(auth)/router': typeof authRouterRoute
  '/_user/dashboard': typeof UserDashboardRoute
  '/(auth)/login': typeof authLoginLazyRoute
  '/(auth)/recover': typeof authRecoverLazyRoute
  '/(auth)/register': typeof authRegisterLazyRoute
  '/_user/create': typeof UserCreateLazyRoute
  '/_user/lbo': typeof UserLboLazyRoute
  '/_user/profile': typeof UserProfileLazyRoute
  '/_user/training': typeof UserTrainingLazyRoute
  '/_user/consultant/': typeof UserConsultantIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/feedback'
    | '/search'
    | '/router'
    | '/dashboard'
    | '/login'
    | '/recover'
    | '/register'
    | '/create'
    | '/lbo'
    | '/profile'
    | '/training'
    | '/consultant'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/feedback'
    | '/search'
    | '/router'
    | '/dashboard'
    | '/login'
    | '/recover'
    | '/register'
    | '/create'
    | '/lbo'
    | '/profile'
    | '/training'
    | '/consultant'
  id:
    | '__root__'
    | '/'
    | '/_user'
    | '/feedback'
    | '/search'
    | '/(auth)/router'
    | '/_user/dashboard'
    | '/(auth)/login'
    | '/(auth)/recover'
    | '/(auth)/register'
    | '/_user/create'
    | '/_user/lbo'
    | '/_user/profile'
    | '/_user/training'
    | '/_user/consultant/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UserRouteRoute: typeof UserRouteRouteWithChildren
  FeedbackLazyRoute: typeof FeedbackLazyRoute
  SearchLazyRoute: typeof SearchLazyRoute
  authRouterRoute: typeof authRouterRoute
  authLoginLazyRoute: typeof authLoginLazyRoute
  authRecoverLazyRoute: typeof authRecoverLazyRoute
  authRegisterLazyRoute: typeof authRegisterLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UserRouteRoute: UserRouteRouteWithChildren,
  FeedbackLazyRoute: FeedbackLazyRoute,
  SearchLazyRoute: SearchLazyRoute,
  authRouterRoute: authRouterRoute,
  authLoginLazyRoute: authLoginLazyRoute,
  authRecoverLazyRoute: authRecoverLazyRoute,
  authRegisterLazyRoute: authRegisterLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/_user",
        "/feedback",
        "/search",
        "/(auth)/router",
        "/(auth)/login",
        "/(auth)/recover",
        "/(auth)/register"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/_user": {
      "filePath": "_user/route.jsx",
      "children": [
        "/_user/dashboard",
        "/_user/create",
        "/_user/lbo",
        "/_user/profile",
        "/_user/training",
        "/_user/consultant/"
      ]
    },
    "/feedback": {
      "filePath": "feedback.lazy.jsx"
    },
    "/search": {
      "filePath": "search.lazy.jsx"
    },
    "/(auth)/router": {
      "filePath": "(auth)/router.jsx"
    },
    "/_user/dashboard": {
      "filePath": "_user/dashboard.jsx",
      "parent": "/_user"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.lazy.jsx"
    },
    "/(auth)/recover": {
      "filePath": "(auth)/recover.lazy.jsx"
    },
    "/(auth)/register": {
      "filePath": "(auth)/register.lazy.jsx"
    },
    "/_user/create": {
      "filePath": "_user/create.lazy.jsx",
      "parent": "/_user"
    },
    "/_user/lbo": {
      "filePath": "_user/lbo.lazy.jsx",
      "parent": "/_user"
    },
    "/_user/profile": {
      "filePath": "_user/profile.lazy.jsx",
      "parent": "/_user"
    },
    "/_user/training": {
      "filePath": "_user/training.lazy.jsx",
      "parent": "/_user"
    },
    "/_user/consultant/": {
      "filePath": "_user/consultant/index.lazy.jsx",
      "parent": "/_user"
    }
  }
}
ROUTE_MANIFEST_END */
